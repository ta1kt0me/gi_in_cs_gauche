#!/usr/local/bin/gosh

(define-class <StrObj>()
  ((string1)
   (string2)
   (operator-str)
   (after-string1)
   (after-string2)))

(define (main args)
  (define str-obj (make <StrObj>))
  (print ">>inptu string1 and string2.")
  (print ">>input stirng1 : ")
  (let ((line (read)))
	(slot-set! str-obj 'string1 (x->string line)))
  (print ">>input string2 : ")
  (let ((line (read)))
	(slot-set! str-obj 'string2 (x->string line)))
  (print ">>Which operator shold be applied?[1-5]")
  (let ((line (read)))
	(slot-set! str-obj 'operator-str (x->string line))
	(case (x->number line)
	  ((1) 
	   (slot-set! str-obj 'after-string1 (string-append (slot-ref str-obj 'string1) "b"))
	   (slot-set! str-obj 'after-string2 (string-append (slot-ref str-obj 'string2) "bbabaa")))
	  ((2)
	   (slot-set! str-obj 'after-string1 (string-append (slot-ref str-obj 'string1) "ab"))
	   (slot-set! str-obj 'after-string2 (string-append (slot-ref str-obj 'string2) "abb")))
	  ((3)
	   (slot-set! str-obj 'after-string1 (string-append (slot-ref str-obj 'string1) "abba"))
	   (slot-set! str-obj 'after-string2 (string-append (slot-ref str-obj 'string2) "ba")))
	  ((4)
	   (slot-set! str-obj 'after-string1 (string-append (slot-ref str-obj 'string1) "aab"))
	   (slot-set! str-obj 'after-string2 (string-append (slot-ref str-obj 'string2) "bab")))
	  ((5)
	   (slot-set! str-obj 'after-string1 (string-append (slot-ref str-obj 'string1) "bab"))
	   (slot-set! str-obj 'after-string2 (string-append (slot-ref str-obj 'string2) "a")))
	)
	(print (slot-ref str-obj 'after-string1) " " (slot-ref str-obj 'after-string2))
))
